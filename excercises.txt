

function primefactors(a_number)
{
  let primefactors =[];
  let dzielnik = 2;

  if (a_number>=2){
    primefactors.push(1)
  }

  if(a_number>=2){
    primefactors.push(2)
  }

  while(a_number>dzielnik)
  {
    if(dzielnik%2!==0)
    {
      primefactors.push(dzielnik)
    }

    dzielnik++

  }

  if(a_number%2!==0){
  primefactors.push(a_number)
  }
  return primefactors;

}


function fib(n){
  if(n===0)return 0
  
  if(n===1){return 1
}

  else{  
   var result = fib(n-1)+fib(n-2)
   console.log(result)
   return result}
}


function fib3(index){
  let a=0; 
  let b=1;
  let sum = 0;
  let counter = 0;

  while(index>counter){
    a=b;
    b++
    counter++
  }
  return a;


}

fib3(6)

function biggestdivider(x,y){
  let nwd = y;
  let counter=0;

  while(y>counter){
    if(x%nwd===0 && y%nwd ===0){
      return nwd
    }
    nwd--;
    counter++;
  }
}

biggestdivider(128,512)

// let myarr = [1,3,3,3,1,5,6,7,8,1];
// let newarr=[];

// function kasujduplikat(zbior){
//   let newarr = [];
//   for(let i =0;i<zbior.length;i++){
//     if(zbior[i]===zbior[i+1])
//     {
      
//     }

// }
// kasujduplikat(myarr)


function dontGiveMeFive(start, end)
{
  let count = 0; 
  for(let i =start; i<=end; i++)
  {
    if(!i.toString().includes("5"))
    {
      count++
    }
  }
  return count
}

dontGiveMeFive(4,17)


// function accum(s) {
// s = s.toLowerCase(); 
// let myaccum = "";
// 	for(let i = 0;i<s.length;i++){
//     myaccum +=s[i].repeat(i+1)
//   }
//   return myaccum;
// }
// accum("abc")


function accum(s) {
s = s.toLowerCase(); 
let myaccum = "";
	for(let i = 0;i<s.length;i++){
    let repeat = i+1;
    let curLet = s[i];
    for(let j=0;j<repeat;j++)
    {
      myaccum+=curLet
    }

      
    }
      return myaccum;

  }


accum("abc")


// function factorial(n){
//     if(n===1)return 1
    
//     for(var i=1;i<=n;i++)
//     {
//         return n*factorial(n-1);
//     }

// };

// factorial(4)

var factorial = function(n) {
    var result = 1;
    for(var i = n ; i >0 ; i--) {
     result*=i;   ;
    }
    return result;
};

factorial(3)

function isPalindrom(str) {
    if(str.length===0){return true}
    
    if(str.length ===1){return true}
    
    for(let i=0; i<str.length;i++)
    {
        if(str[i]===isPalindrom(str.slice(1))){return true
        
    }
}}

isPalindrom("BC")


function reverseString(str) {
  let str1="";
  for(let i=0;i<str.length;i++){
    let curel =str[i];
    let last= str[str.length-1-i];
    let temp = curel;
    
    curel=last;
    console.log(curel)
    last=temp;
    str1+=curel;
 


  }
  return str1;
}

reverseString("hello");



// function countVowels(string) {
//   // base case: if string.length === 0, it doesn't have any vowels
//   if (string.length === 0) {
//     return 0;
//   }

//   // recursive case: string.length must get closer to 0
//   let numVowels = 0;

//   // if the first letter is a vowel...
//   if (isAVowel(string[0])) {

//     // ...increment the numVowels
//     numVowels += 1;
//   }

//   // add the count of vowels in the remaining characters of the string
//   numVowels += countVowels(string.slice(1))
//   console.log("=>"+numVowels)

//   return numVowels;
// }


// // helper function that returns true if the character is a vowel
function isAVowel(char) {
  let vowels = ['a', 'e', 'i', 'o', 'u'];
  return vowels.includes(char);
}

// countVowels("abcdefghikl")

function fact(nn){
let result = 1; 
 for(let i =nn.length; i>=1;i--)
 {
   result*=i
 }
return result

}


function factorialnew(myarrrrr) {

let possibilities = 0;

  while(possibilities<fact(myarrrrr)) {

    let sliced = myarrrrr.shift();
    myarrrrr.push(sliced)

    possibilities += 1;
    console.log(myarrrrr)

  }


  return possibilities;
}



factorialnew(["1","2","3","4"])

// function isLetter(l){
//   let alp="abcdefghijklmnopqrstuwxyz"
//   return alp.includes(l);
// }


// function accum(s) {
// s = s.toLowerCase(); 
// let myaccum = "";


// 	for(let i = 0;i<s.length;i++)
//   {
//     if(isLetter(s[i])){
//     let curlEl = s[i].toUpperCase();
//     myaccum+=curlEl;
//     let count=i;
//     while(1<=count)
//     {
//     myaccum+=curlEl.toLowerCase()
//     count--
//     // console.log(count)
  
//     }
//     }
//     else{myaccum+=s[i]}

//   }
//   return myaccum;
// }



  

function accum(s) {
s = s.toLowerCase(); 
let alp="abcdefghijklmnopqrstuwxyz"
let myaccum = "";


	for(let i = 0;i<s.length;i++)
  {
    if(alp.includes(s[i])){
    let curlEl = s[i].toUpperCase();
    myaccum+=curlEl;
    let count=i;
    
    while(1<=count)
    {
    myaccum+=curlEl.toLowerCase()
    count--
    // console.log(count)
  
    }
    }
    else{myaccum+=s[i]}

  }
  return myaccum;
}


accum("abc-d")

function longest(s1, s2) {
let joined = s1+s2; 
let mySet = new Set();
for(let i=0;i<joined.length;i++){
  mySet.add(joined[i])
}

return [...mySet].sort().join("")
  // your code
}

longest("agbc", "abcg")

function printerError(s) {

let controlcode = "abcdefghijklm";
let errorcolor = 0;
let all=0;

for(let i =0; i<s.length;i++)
{
  if(controlcode.includes(s[i])){
  all+=1;
  }
  else{
  all+=1;
  errorcolor+=1
  }

}
return errorcolor+"/"+all;

}

printerError("aaannnnmmmmmmbbb")


// function Person(first, last, age, eyecolor) {
//     this.firstName = first;
//     this.lastName = last;
//     this.age = age;
//     this.eyeColor = eyecolor;
// }
// Person.prototype.name = function() {
//     return this.firstName + " " + this.lastName;
// };\




function countletter(str, letter){
  let count = 0; 
 for(let i=0;i<str.length;i++){
   if(str[i]===letter){
     count++
   }
 }
   return count;
}


// countletter("abcbbbdddbbb","b")

// function minim(argument1,argument2){
//   if(argument1<argument2){return argument1}
//   else{return argument2}
// }

// minim(3,5)

// // function isEven(mynumber){
// //   if(mynumber===0){return true}
// //   if(mynumber===1){return false}
// //   console.log(mynumber, isEven(mynumber-2))
// //   return isEven((mynumber-2))
// // }

// Set L to 0 and R to n − 1.
// If L > R, the search terminates as unsuccessful.
// Set m (the position of the middle element) to the floor of (L + R) / 2, which is the greatest integer less than or equal to (L + R) / 2.
// If Am < T, set L to m + 1 and go to step 2.
// If Am > T, set R to m − 1 and go to step 2.
// Now Am = T, the search is done; return m.
// This iterative procedure keeps track of the search boundaries with the two variables L and R. The procedure may be expressed in pseudocode as follows, where the variable names and types remain the same as above, floor is the floor function, and unsuccessful refers to a specific variable that conveys the failure of the search.[7]


// function binarysearch(items,myvalue){
// items = items.sort()


//   let first_indx = 0; 
//   let last_indx = items.length -1; 
//   let middle =  Math.floor((last_indx + first_indx)/2);
//   let searched_indx; 

//   while(items[middle]!==myvalue){
//      if(items[middle]<myvalue){
//     first_indx = middle+1;
//   }

//     else if(items[middle]>myvalue){
//     last_indx = middle-1;
//   }

//    middle =  Math.floor((last_indx + first_indx)/2);

//   }
//   return middle

function max(...numbers) {
let result = -Infinity;
for (let i of numbers) {
if (i > result) result = i;
}
return result;
}
max(2,4,6,1,12,-1)



function checkgap(mynum){

var reg = /(10*1)/;
var found = mynum.match(reg);



return found
}

checkgap("100110000011")



// r regex1 = RegExp('foo*');
// var regex2 = RegExp('foo*','g');
// var str1 = 'table football';

// console.log(regex1.test(str1));va





function removezeros(mypattern)
{
  let countindx = 0;
  for(let i=0;i<mypattern.length;i++){
    if(mypattern[i]==="0"){
      countindx++;
    }
    else if(mypattern[i]!=="0")
      {return mypattern.slice(countindx)}
  }
  return mypattern
}


function removezeros_from_the_back(mypattern22)
{
  let countindx22 = mypattern22.length;
  console.log(countindx22)
  for(let j=mypattern22.length-1; j>0;j--){
    if(mypattern22[j]==="0"){
      console.log(mypattern22[j])
      countindx22--   
    }
    else{return mypattern22.slice(0,countindx22)}
   
  }
}


function solution(N){
  let bin = (N >>> 0).toString(2);
  let bin2 = (N >>> 0).toString(2);
  let bin3 = (N >>> 0).toString(2);
  let pusty ="";
  console.log(bin)
  let left_indx =0;
  for(let i=0;i<bin2.length;i++){
    if(bin2[i]==="0"){
      left_indx++;
    }
    else if(bin2[i]!=="0")
      {break}
  }
  pusty = bin2.slice(left_indx,bin.length)



  let right_indx = pusty.length;
  for(let j=pusty.length-1; j>0;j--){
    if(pusty[j]==="0"){
      right_indx--   
    }
        else if(pusty[j]!=="0")
      {break}
  }

  pusty2 = pusty.slice(0,right_indx)

  bin=pusty2

  console.log(pusty2)

  let curlong=0;
  let temp = 0;

      for(let i=0; i<bin.length;i++)
  {
      if(bin[i]==="0"){
        curlong++;
        if(curlong>temp){
          temp = curlong
        }
      }
      else{
        curlong = 0
      }
  }

  return temp
}

solution(15)


// YOUR CODE BELOW
function countToTen(n){
  if(n===0){return}
  console.log(n);
  return countToTen(n-1)
}

countToTen(10)


function reverseArray(array) {
  // base case: if the array has a length of 1, the reverse of the array is the array itself
  if (array.length === 1) {

    // however, we have to make sure we're returning a copy of the original array
    console.log(array)
    return array.slice();
  }

  // recursive case: array.length must get closer to one
  let newArray = [];

  // the first element in newArray should be the last element in array
  let lastElement = array[array.length - 1];
  console.log(lastElement)
  newArray.push(lastElement);

  // get the reversed array for the remaining elements (slicing off the last element, since we've already handled it)
  let reversedRemainingElements = reverseArray(array.slice(0, -1));

  // concat the remaining elements onto our new array
  newArray = newArray.concat(reversedRemainingElements);

  return newArray;
}


reverseArray([1,2,3])



function solution(A) {
    let uniqueValues = new Set(A);
    let referenceSize = uniqueValues.size
 
    let mySet =[]; 
    let coveringIndex = 0; 
    
    while(mySet.length<referenceSize){
    
    for(let i=0; i<A.length; i++)
    {
        let curEl = A[i];
        
        
        if(!mySet.includes(cur))
        {
            mySet.push(curEl)
        }
        
        coveringIndex++
        
    }
    
    return coveringIndex
    
    }

    // write your code in JavaScript (Node.js 8.9.4)
}

solution([2,2,1,0,1])

function allsub(mystring){
  let emptarr =[];
  for(let i=0;i<mystring.length;i++){
    for(let j=0;j<mystring.length+1;j++){
      if( mystring.slice(i,j).length>0){
        emptarr.push(mystring.slice(i,j))
      }
    }
  }
  return emptarr;
}

allsub("abc")

function solution(A, K) {
    // write your code in JavaScript (Node.js 8.9.4)
    let lastElement = A.length;
    let leftelement = A.length-K;

    if(K<=A.length){
      
      return A.slice(leftelement,lastElement).concat(A.slice(0,leftelement))}
      if(K>A.length){

        let K2 = K%A.length;
        console.log(K2)

       let leftelement2 = A.length-K2;

      return A.slice(leftelement2,lastElement).concat(A.slice(0,leftelement2))
    }
}
solution([1, 1, 2, 3, 5], 2)


function solution(A){
  let myind=new Set();
  for (let i = 0; i < A.length;i++){
     let curEl = A[i];

     for(let j=1+i; j<A.length;j++){
       if(curEl===A[j]){
         delete A[i]
         delete A[j]

       }
     }
   }

  let myarr2 = [...(myind)].sort(); 
  console.log(A)
 
 }

solution([4,4,5,5,6,6,6])


var myMap = new Map();

for (var [key, value] of myMap) {
  if(key!==curEl){
    key === curEl;
    value++
  }
  console.log(myMap)
}


var hash = new Map();
hash.put('key','value');
console.log(hash)

function getFrequency(string) {
    var freq = {};
    for (var i=0; i<string.length;i++) {
        var character = string.charAt(i);
        if (freq[character]) {
           freq[character]++;
        } else {
           freq[character] = 1;
        }
    }

    return freq;
};


function getFrequency(aaa) {
    aaaa = aaaa.join()
    var freq = {};
    for (var i=0; i<string.length;i++) {
        var character = string.charAt(i);
        if (freq[character]) {
           freq[character]++;
        } else {
           freq[character] = 1;
        }
    }

    return freq;
};



getFrequency([1,2,3])


function isPalin(mystr){
  if(mystr.length===1){return true}

  let first = mystr[0];
  let last = mystr[mystr.length -1];

  if(first !== last){
    return false
  }
  else {return true}

  return isPalin(mystr.slice(1,-1))
}

isPalin("iki")


function sumDigits(mydigit){
let mydigitstr = mydigit.toString();


if(mydigitstr.length === 1){
console.log(mydigit)
 return mydigit}
// ##czemu tu cały mygit zwraca??

let singleDigit = mydigitstr[0];
let mysum =0;

mysum+=Number(singleDigit);
mysum+=sumDigits(Number(mydigitstr.slice(1)));


return mysum}

sumDigits(123)


function reversedArr(arr)
{
  let reversed =[];
  if(arr.length===1)
    {return arr.slice()}
  
  let first = arr[arr.length-1];
   reversed.push(first)
  let rest = reversedArr(arr.slice(0,-1));

  return reversed = reversed.concat(rest) 
}


reversedArr(["1","20","3","4"])

function allcomb(my_arr){
  let new_arr =[];

  if(my_arr.length===1){return my_arr}

  console.log(my_arr[0].concat(rest))

 

}

allcomb(["a","b","c","d"])

// function isPangram(string){
// let myalphabet = "abcdefghijklmnopqrstuwxyz";
// let myarr2 = ""

// for(let i = 0; i<string.length;i++){
//   let curEl = string[i].toLowerCase();
 
//   if(myalphabet.indexOf(curEl)!=-1){
//     if(myarr2.indexOf(curEl)===-1){
//          myarr2+=curEl
//     }
//   } 
// }
// if(myarr2.length===25)return true
// else{return false}
// }


// isPangram("The quick brown fox jumps over the lazy dog.")


// // function transpose(arr,arrLen) {
// //   for (var i = 0; i < arrLen; i++) {
// //     for (var j = 0; j <i; j++) {
// //       //swap element[i,j] and element[j,i]
// //       var temp = arr[i][j];
// //       arr[i][j] = arr[j][i];
// //       arr[j][i] = temp;
// //     }
// //   }
// // }
// "{{{}}}{}}"



// function validBraces(braces){

// let stack =[];

// for(let i=0;i<braces.length;i++){
//   if(braces[i]==="{"||braces[i]==="["||braces[i]==="("){
//     switch (braces[i]) {
//   case "{":
//     stack.push("}")
//     break; 
//   case "[":
//     stack.push("]")
//     break; 
//   case "(":
//     stack.push(")")
//     break; 
//   }

// console.log(braces)
// }
//   else if(braces[i]==="}"||braces[i]==="]"||braces[i]===")"){//fix
//     if(stack.length===0){
//       return false
//     }
//     else if(stack[stack.length-1]===braces[i]) // alternative: var top = stack.slice(-1)[0];
//     {stack.pop()}

//     else{return false}
//   }
  
// }

// return(stack.length===0)

// }


// validBraces("(})")


// // function encrypt(text, n) {

// // let count = n;
// // let newarr=[];




// //  while(count>0){
// //    text =  letter2.concat(letter)
// //    let letter ="";
// //   let letter2 ="";

// //   for(let j =0;j<text.length;j+=2){
// //   letter+=text[j]
// //   }

// //    for(let k =1;k<text.length;k+=2){
// //   letter2+=text[k]
// // }
// // newarr.push(text)
// // count--

// //  }

// // return newarr;


// let text = "<h1>Winter is coming</h1>";
// let myRegex = /<.*>/; // Change this line
// let result = text.match(myRegex);

// console.log(result)

// let mytext = "hej"
// let myregex = /.*/
// let myresult = mytext.match(myregex)

// console.log(myresult)


// let repeatNum = "42 42 42";
// let reRegex = /(\d+)\s\1\2\1/; // Change this line
// let result = reRegex.test(repeatNum);

// console.log(result)


let hello = "   Hello, World!  ";
let wsRegex = /^\s+/g;
let wsRegex2 = /\s*$/g; // Change this line
let result1 = hello.replace(wsRegex,"");
let result = result1.replace(wsRegex2,""); // Change this line



function reverseString(str) {
  result ="";
  for(let i=str.length-1;i>=0;i--){
    result+=str[i]
  }
  return result;
}

reverseString("hello");


// function factorialize(num) {
//   let result = num;
//   let counter = 1
//   while(counter<num){
//     result *=num-counter;
//     console.log(num-counter)
//     counter++;
//   }
//   return result;
// }

// factorialize(5)

function findLongestWordLength(str) {
let words = str.split(" ");
let maxlength = 0; 
for(let i =0;i<words.length;i++){
  let curEl = words[i].length;
  if(maxlength<curEl){
    maxlength = curEl;
  }
}
return maxlength
}

findLongestWordLength("kasia ma kota")

function largestOfFour(arr) {
let maxarr = [];
for(let  i = 0;i<arr.length;i++){
for(let j = 0;j<arr[i].length;j++)
{ 
  let curEl = arr[i][j]
  if(maxarr[i]){
  if(maxarr[i]<curEl){
    maxarr[i] = curEl
  }
  }
  else{
    maxarr.push(arr[i][j])
  }
}
}
    return maxarr;
}

largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [-32, -35, 37, 39], [1000, 1001, 857, 1]])


function confirmEnding(str, target) {
  if(str.length === 0){return false}
  if(str[str.length-1]===target){return true}
  if(str==target){return true}
  return  confirmEnding(str.slice(1),target); 
}


confirmEnding("Bastian", "an");


function truncateString(str, num) {
  let result = ""; 
  let mylen = num;
  console.log(mylen)
  for(let i = 0;i<mylen;i++){
    result+=str[i]
  }
  result+="..."
  // Clear out that junk in your trunk
  return result;
}

truncateString("A-tisket a-tasket A green and yellow basket", "A-tisket a-tasket A green and yellow basket".length)

function titleCase(str) {
  let mystr= str.toLowerCase();
  let words = mystr.split(" ");
  let result = "";
  for(let i = 0; i<words.length;i++){
      let elementLetter =words[i][0].toUpperCase();
      result+=elementLetter+words[i].slice(1)
      result+=" "
    }
 
   
  return result.trim()
}

titleCase("HERE IS MY HANDLE HERE IS MY SPOUT")

function frankenSplice(arr1, arr2, n) {
  // It's alive. It's alive!
  let localArray = arr2.slice();
  for (let i = 0; i < arr1.length; i++) {
    localArray.splice(n, 0, arr1[i]);
    n++;
  }
  return localArray;
}


function bouncer(arr) {
  let localArr = arr.slice();
  // Don't show a false ID to this bouncer.
  for(let i = 0;i<localArr.length;i++){
    if(typeof localArr[i] !== "boolean"){
      localArr.splice(i,1)
    }
  }
  return localArr;
}

bouncer([7, "ate", "", false, 9]);



function getIndexToIns(arr, num) {
  arr = arr.sort();
  let counter = 0;
     while(num>=arr[counter]){
      counter++
    }
    return counter

}

getIndexToIns([40, 60], 50);


function mutation(arr) {
  let localarr = arr.slice(0,1).toString().toLowerCase();

  let localstring = arr.slice(1).toString().toLowerCase();
  let techarr = [];

  console.log(localstring)
  for(let i = 0;i<localstring.length;i++){
    if(localarr.indexOf(localstring[i])!==-1){
      techarr.push(localstring[i])
    }
  }

  if(techarr.length === arr[1].length){
    return true
  }
  else {return false}

}



mutation(["hello", "HELLO"]);


// function chunkArrayInGroups(arr, size) {
//   let localarr =   arr.splice(size);
//   return [arr,localarr]
// }

// chunkArrayInGroups(["a", "b", "c", "d"], 2);


function chunkArrayInGroups(arr, size) {
  let arr2 =[]
  for(let i = 0;i<arr.length;i+=size){
  arr2.push(arr.slice(i,i+size))
}
return arr2}


chunkArrayInGroups(["a", "b", "c", "d"], 2);

let reg = /([\d]+(\?)*[\d])+/g;
let reg2 =/(\?)+/g;


str1 = "acc?7??sss?3rr1??????5";

function QuestionsMarks(str) { 
  let reg = /([\d]+(\?)*[\d])+/g;
  let reg2 =/(\?)+/g;

  let checkPairs = str.match(reg);

  if (checkPairs.length%2===0){
  let checkMarks = checkPairs.join().match(reg2);
    if (checkMarks.length===10){
      return true;
    }
    else return false
  }
  else return false
          
}

console.log("acc?7??sss?3rr1??????5".match(reg)); 
console.log("acc?7??sss?3rr1??????5".match(reg2)); /// my@mail.com,his@site.com.uk

console.log(QuestionsMarks(str1))


function sym(args) {
  args = Array.prototype.slice.call(arguments)

  for (let i = 0;i<args.length;i++){
    console.log(args[i])
  }
  
  return args;
}

sym([6, 2, 3], [5, 2, 1, 4]);









// // }

// // encrypt("This is a test!",2)


// function toWeirdCase(mystring){
// let myarr = mystring.split(" ");
// let newstring=""

// for(let i =0;i<myarr.length;i++){

//   for(let j=0;j<myarr[i].length;j++){

//     if(j%2==0){newstring+=myarr[i][j].toUpperCase()}

//     else{newstring+=myarr[i][j].toLowerCase()}
//   }
//     newstring+=" "
// }

// return newstring.trim()
// }


// toWeirdCase( "Weird string case" )



// function accum(s) {
// s = s.toLowerCase(); 
//   let alp="abcdefghijklmnopqrstuwvxyz"
// let myaccum = "";


// 	for(let i = 0;i<s.length;i++)
//   {
//     if(alp.includes(s[i])){
//     let curlEl = s[i].toUpperCase();
//     myaccum+=curlEl;
//     let count=i;
//     while(1<=count)
//     {
//     myaccum+=curlEl.toLowerCase()
//     count--
  
//     }
//     }
//     else{myaccum+=s[i]}

//     myaccum+="-"

//   }
//   return myaccum.slice(0,-1);
// }


// accum("ZpglnRxqenU")


// function sumDigPow(a,b) {
//   let mynum = a.toString();

//   let myresult = 0;
  
//   let mynumlength = mynum.length; 
  

//   while(mynumlength>0){
//     myresult+=parseInt(mynum[mynumlength-1])**mynumlength;
//     mynumlength--
//   }

//   if(myresult===a){
//     return true
//   }
//   else{
//     return false
//   }

// }

// sumDigPow(89)


let scores = [60, 50, 60, 58, 54, 54, 58, 50, 52, 54, 48, 69,
34, 55, 51, 52, 44, 51, 69, 64, 66, 55, 52, 61,
46, 31, 57, 52, 44, 18, 41, 53, 55, 61, 51, 44];

let myresults ="",

function printallscores(scores)
{
for(let i = 0; i<scores.length;i++)
{
  myresults+=("The ${i} score is ${scores[i]} <br>")
}

console.log(myresults)

}



// function sumDigPow(a,b) {
//   let myarr =[];

//   for(let i = a;i<=b;i++){
  
//   let mynum = i.toString();

//   let myresult = 0;
  
//   let mynumlength = mynum.length; 
  

//   while(mynumlength>0){
//     myresult+=parseInt(mynum[mynumlength-1])**mynumlength;
//     mynumlength--
//   }

//   if(myresult===i){
//     myarr.push(myresult)
//   }

//   myresult = 0;

// }

// return myarr.sort(function(a, b){return a - b})

// }

// sumDigPow(10,150)

// function camCase(){
//   let str = this; 
//   let r=/^\s+/;
//   str = str.replace(r,'')
//   let myresult = ""
//   if(typeof str[0] === "string"){myresult+=str[0].toUpperCase()}
//   let count = 0;
//    for (let i =1; i<str.length ;i++){
//      if(str[i]===" " && i+1<str.length){
//        myresult+=str[i+1].toUpperCase();
//        i++
//      }
//      else{myresult+=str[i]}
//    }
//    return myresult
// }


// String.prototype.camelCase=camCase


// "    camel case word".camelCase()

// // https://www.codewars.com/kata/camelcase-method/train/javascript

// // String.prototype.camelCase=function(){
// //    return this.split(' ').map(function(word){
// //     return word.charAt(0).toUpperCase() + word.slice(1);
// //   }).join('');
// // }




// function findPair(myarr){
//   let mySum =0; 
//   let maxNum = Math.max(...myarr);
//   let notPrime =[]; 
//   let myResult =[];
//   let isPrime=[];

//   for(let i=2;i<=maxNum;i++){
//     for(let k =2; k<=maxNum;k++){
//       if(i!==k && i%k===0){
//         notPrime.push(i)
//       }
//     }
//   }

//   for(let n = 2;n<=maxNum;n++){
//     if(notPrime.indexOf(n)===-1){
//       isPrime.push(n)
//     }
//   }

// for(let m = 0;m<isPrime.length;m++){
//   let oneCaptured= false;
//   for(let j =0;j<myarr.length;j++){
//       if(myarr[j]%isPrime[m]===0){
//         mySum+=myarr[j]
//           oneCaptured=true;
//       }
//     }
//     if(oneCaptured!==false){
//     myResult.push([isPrime[m],mySum])
//       mySum=0;
//     }
//   }

// myResult = myResult.sort(function(a,b) {
//     return a[1] - b[1];
// })
         
//   return myResult
// }
// findPair([12,15])

// //WITH FIRST COLUMN
// // arr = arr.sort(function(a,b) {
// //     return a[0] - b[0];
// // });


// //WITH SECOND COLUMN
// // arr = arr.sort(function(a,b) {
// //     return a[1] - b[1];
// // });


// // function sortFunction(a, b) {
// //     if (a[0] === b[0]) {
// //         return 0;
// //     }
// //     else {
// //         return (a[0] < b[0]) ? -1 : 1;
// //     }
// // }

// function isPrime(number) {
//     for(let i=2;i<=number;i++){
//       if(i!==number && number%i===0){
//         return false
//       }
//     }
//     return true
// }

// function getPrimes(start, finish) {
//   let maxnum = finish;
//   let minnum = start;
//   if(start>finish){
//     maxnum=start
//     minnum = finish
//   }
//   let primes=[];

//   for(let i=minnum;i<=maxnum;i++){
//     let oneCaptured= false;
//     for(let k =2; k<=maxnum;k++){
//       if(i!==k && i%k===0){
//         oneCaptured=true;
//       }
//     }
//     if(oneCaptured===false && i>1){
//     primes.push(i)
//     }
//   }
//   return primes
// }

// getPrimes(1,10)
// // https://www.codewars.com/kata/primes-in-numbers


// // function isPrime(number) {
// // if(number<=1){return false}
// //     for(let i=2;i<=number;i++){
// //       if(i!==number && number%i===0){
// //         return false
// //       }
// //       else{return true}
// //     }
// //     return false
    
// // }

// // isPrime(3)

// var findMissing = function (list) {
//   let missigdifference = Math.floor((list[list.length-1] - list[0])/list.length);
//   let myresult=0;
//   for(let i = 0;i<list.length;i++){
//     let curEl = list[i]+missigdifference;
//     let next = list[i+1];
//     if(curEl!==next &&i+1<list.length){
//       myresult+= next-missigdifference;
//     }

//   }
//   return myresult
// }


// findMissing([1, 3, 5, 9, 11])


// let s = (1+2)*(3-1)*((3-4)*5)"


// function mymath(mystring){
//   let myarr = mystring.split();
//   let mynumber = 0;
//   for(let i = 0;i<mystring.length;i++){
//     if(curEl === "*"){
//       curEl=*;
//     }
//   }
//   return myarr
// }

// mymath(s)

// function tabliczkaMnozenia(){
//   for(let i = 1;i<11;i++){
//     for(let j=0; j<11;j++){
//       console.log(i+" * "+j+" = "+(i*j))   
//     }
//   }
// }

// tabliczkaMnozenia()

// function transpozycjaMacierzy(mojamacierz){
//   let tempi = mojam
//   for(let i = 0;i<mojamacierz.length;i++){
  
//     for(let j=0;j<mojamacierz[i];j++){
//      let temp = mojamacierz[i][j];
//      mojamacierz[i][j] = mojamacierz[j][i];
//      console.log()
//     }
//   }
// }

// function myfib(mynum){
//   if(mynum===0){
//     return 0
//   }
//   else if(mynum ===1){
//     return 1
//   }
//  return myfib(mynum-1)+myfib(mynum-2)
// }

// function silnia(num){
//   if(num===0){
//     return 1
//   }
//   else if(num ===1){
//     return 1
//   }
//   return num*silnia(num-1)
// }

// function silniaIter(mynumber){
//   let myResult = mynumber; 
//   for(let i =1;i<mynumber;i++){
//     myResult*=i
//   }
//   return myResult
// }


// pierwsze wywołanie	0	1	1	[0, 1, 2, 3, 4]	1
// drugie wywołanie	1	2	2	[0, 1, 2, 3, 4]	3
// trzecie wywołanie	3	3	3	[0, 1, 2, 3, 4]	6
// czwarte wywołanie	6	4	4	[0, 1, 2, 3, 4]	10



// myReduce([0, 1, 2, 3, 4])


// // [0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array) {
// //   return previousValue + currentValue;
// // });

// [0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array) {
//   return previousValue + currentValue;
// });



// function myReduce(myarr, fn){
//   let myCurrArr = [];
//   for(let i=1;i<myarr.length;i++){
//     myCurrArr.push(fn(myCurr))
//   }
//   return myCurrArr
// }

// myReduce([1,2,3,4],x => x+x)

// let myarr =[0,1,2,3,4]

// const reduction = myarr.map( => officer.id);

// const items = [{
//   id: 1,
//   name: 'ball'
// },{
//   id: 2,
//   name: 'axe'
// }]

// //says I want to update item 2
// let input = 'laptop', id = 2

// const map = (arr, cb) => arr.reduce((r, o, i, a) => {
//   r.push(cb(o, i, a));
  
//   return r;
// }, []);

// const updated_item = map(items, (o) => o.id === id ? ({ ...o, name: input }) : o);

// console.log(updated_item) // worked

// }

// var liczby = [1, 5, 10, 15];
// var podwojenia = liczby.map(function(x) {
//     return x * 2;
// });


 // returns[false,1,1,2,1,3,"a",0,0]

// function moveZeros(arr) {
//   let myarr = []
//   let zeros =[];
//   for(let i =0; i<arr.length;i++){
//     if(arr[i]!==0){
//       myarr.push(arr[i])
//     }
//     else if(arr[i]===0)
//     {
//       zeros.push(arr[i])
//     }
//   }
//     return myarr.concat(zeros)
// }

// var moveZeros = function (arr) {
//   return arr.filter(function(x) {return x !== 0}).concat(arr.filter(function(x) {return x === 0;}));
// }

// moveZeros([false,1,0,1,2,0,1,3,"a"])


// const map = (arr, cb) => arr.reduce((r, o, i, a) => {
//   r.push(cb(o, i, a));
  
//   return r;
// }, []);

// function myMap(arr){
//   let myNewArr = [];
//   let sum = arr.reduce((acc, val) => {
//     console.log((acc+val).map());
//   return acc + val;
// });
// return sum
// }


// let myarr = [0,1,2,3,4]

// myMap(myarr)


// var new_array = arr.map(function callback(currentValue[, index[, array]]) {
//     // Return element for new_array
// }[, thisArg])

// var new_array = arr.map(function callback(currentValue[, index[, array]]) {


//     // Return element for new_array
// }[, thisArg])


// function map(array, fn) {  
//     return array.reduce((newArray, el) => [...newArray, fn(el)], [])
// }

// map([1,2,3], x => x+x); // [1, 4, 9] 


// function myMap(myArr){
//   let myReduceditemsArr = [];
//   let outputOfcurrReduced = myArr.reduce((acc, val) => {
//     myReduceditemsArr.push(acc);   
//   //   console.log(acc+val);
//   // return acc + val;
// });
  
// return myReduceditemsArr
// }


// myMap([1,2,3])

// function map(array, fn) {  
//     return array.reduce((newArray, el) => [...newArray, fn(el)], [])
// }

// function myReduce(myarr, myFn){
//   let myOutputArr = [];
//   for(let i=0;i<myarr.length;i++){
//     myOutputArr.push(myFn(myarr[i]))
//   }
//   return myOutputArr
// }

// myReduce([1,2,3,4],x => x+x)

// function myMap(myarr, myFn){
//   return myarr.reduce((outputArr, myArrItem)=>[...outputArr, myFn(myArrItem),[])

// }


function myMap(myArray, myFunction) {  
    return myArray.reduce((outputArr, myArrItem) => [...outputArr, myFunction(myArrItem)], [])
}

myMap([1,2,3,4],x => x*x)



function moveZeros(arr) {
  let myarr = []
  let zeros =[];
  for(let i =0; i<arr.length;i++){
    if(arr[i]!==0){
      myarr.push(arr[i])
    }
    else if(arr[i]===0)
    {
      zeros.push(arr[i])
    }
  }
    return myarr.concat(zeros)
}


var findMissing = function (list) {
  let missigdifference = Math.floor((list[list.length-1] - list[0])/list.length);
  let myresult=0;
  for(let i = 0;i<list.length;i++){
    let curEl = list[i]+missigdifference;
    let next = list[i+1];
    if(curEl!==next &&i+1<list.length){
      myresult+= next-missigdifference;
    }

  }
  return myresult
}

function camCase(){
  let str = this; 
  let r=/^\s+/;
  str = str.replace(r,'')
  let myresult = ""
  if(typeof str[0] === "string"){myresult+=str[0].toUpperCase()}
  let count = 0;
   for (let i =1; i<str.length ;i++){
     if(str[i]===" " && i+1<str.length){
       myresult+=str[i+1].toUpperCase();
       i++
     }
     else{myresult+=str[i]}
   }
   return myresult.trim()
}


String.prototype.camelCase=camCase



function sumDigPow(a,b) {
  let myarr =[];

  for(let i = a;i<=b;i++){
  
  let mynum = i.toString();

  let myresult = 0;
  
  let mynumlength = mynum.length; 
  

  while(mynumlength>0){
    myresult+=parseInt(mynum[mynumlength-1])**mynumlength;
    mynumlength--
  }

  if(myresult===i){
    myarr.push(myresult)
  }

  myresult = 0;

}

return myarr.sort(function(a, b){return a - b})

}


function accum(s) {
s = s.toLowerCase(); 
  let alp="abcdefghijklmnopqrstuwvxyz"
let myaccum = "";


	for(let i = 0;i<s.length;i++)
  {
    if(alp.includes(s[i])){
    let curlEl = s[i].toUpperCase();
    myaccum+=curlEl;
    let count=i;
    while(1<=count)
    {
    myaccum+=curlEl.toLowerCase()
    count--
    // console.log(count)
  
    }
    }
    else{myaccum+=s[i]}

    myaccum+="-"

  }
  return myaccum.slice(0,-1);
}


function validBraces(braces){

let stack =[];

for(let i=0;i<braces.length;i++){
  if(braces[i]==="{"||braces[i]==="["||braces[i]==="("){
    switch (braces[i]) {
  case "{":
    stack.push("}")
    break; 
  case "[":
    stack.push("]")
    break; 
  case "(":
    stack.push(")")
    break; 
  }

console.log(braces)
}
  else if(braces[i]==="}"||braces[i]==="]"||braces[i]===")"){//fix
    if(stack.length===0){
      return false
    }
    else if(stack[stack.length-1]===braces[i]) // alternative: var top = stack.slice(-1)[0];
    {stack.pop()}

    else{return false}
  }
  
}

return(stack.length===0)

}


function isPangram(string){
let myalphabet = "abcdefghijklmnopqrstuwxyz";
let myarr2 = ""

for(let i = 0; i<string.length;i++){
  let curEl = string[i].toLowerCase();
 
  if(myalphabet.indexOf(curEl)!=-1){
    if(myarr2.indexOf(curEl)===-1){
         myarr2+=curEl
    }
  } 
}
if(myarr2.length===25)return true
else{return false}
}


function expandedForm(num) {
let mystr = (num).toString(); 
let mylength = mystr.length-1; 
let maxZeros = Math.pow(10,mylength); 
let result ="";

for(let i=0; i<mystr.length;i++){
 let curEl = mystr[i]; 
 if(curEl!=="0"){
    let curNum = parseInt(curEl)*maxZeros;
    result+=curNum.toString(); 

    result+=" + "
    

 }
 maxZeros=maxZeros/10;
}
return result.slice(0,result.length-3)

}

function maskify(cc) {
  let mypass =[];
for(let i=0;i<cc.length;i++)
{
  mypass.push(cc[i])

  for(let j=0; j<mypass.length-4;j++)
{
  mypass[j]="#"
}

}

return mypass.join("")
}
function longest(s1, s2) {
let joined = s1+s2; 
let mySet = new Set();
for(let i=0;i<joined.length;i++){
  mySet.add(joined[i])
}

return [...mySet].sort().join("")
  // your code
}

function printerError(s) {

let controlcode = "abcdefghijklm";
let errorcolor = 0;
let all=0;

for(let i =0; i<s.length;i++)
{
  if(controlcode.includes(s[i])){
  all+=1;
  }
  else{
  all+=1;
  errorcolor+=1
  }

}
return errorcolor+"/"+all;

}
